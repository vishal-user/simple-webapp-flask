name: Flask App CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging
  release:
    types: [created]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt || pip install flask pytest

      # Step 4: Run tests
      - name: Run tests
        run: |
          source venv/bin/activate
          if [ -d "tests" ]; then
            pytest -v
          else
            echo "No tests found, skipping tests."
          fi

      # Step 5: Build step (optional for packaging)
      - name: Build the application
        run: |
          echo "Building Flask app..."
          mkdir -p build
          cp -r * build/

      # Step 6: Deploy to Staging
      - name: Deploy to Staging
        if: github.ref == 'refs/heads/staging'
        env:
          HOST: ${{ secrets.STAGING_HOST }}
          USER: ${{ secrets.STAGING_USER }}
          KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          echo "Deploying to staging server..."
          echo "$KEY" > staging_key.pem
          chmod 600 staging_key.pem
          ssh -i staging_key.pem -o StrictHostKeyChecking=no $USER@$HOST "
            mkdir -p ~/flask_staging &&
            cd ~/flask_staging &&
            rm -rf * &&
            exit
          "
          scp -i staging_key.pem -o StrictHostKeyChecking=no -r ./* $USER@$HOST:~/flask_staging
          ssh -i staging_key.pem -o StrictHostKeyChecking=no $USER@$HOST "
            cd ~/flask_staging &&
            nohup python3 app.py > staging.log 2>&1 &
          "

      # Step 7: Deploy to Production (on release tag)
      - name: Deploy to Production
        if: startsWith(github.ref, 'refs/tags/')
        env:
          HOST: ${{ secrets.PROD_HOST }}
          USER: ${{ secrets.PROD_USER }}
          KEY: ${{ secrets.PROD_SSH_KEY }}
        run: |
          echo "Deploying to production server..."
          echo "$KEY" > prod_key.pem
          chmod 600 prod_key.pem
          ssh -i prod_key.pem -o StrictHostKeyChecking=no $USER@$HOST "
            mkdir -p ~/flask_production &&
            cd ~/flask_production &&
            rm -rf * &&
            exit
          "
          scp -i prod_key.pem -o StrictHostKeyChecking=no -r ./* $USER@$HOST:~/flask_production
          ssh -i prod_key.pem -o StrictHostKeyChecking=no $USER@$HOST "
            cd ~/flask_production &&
            nohup python3 app.py > production.log 2>&1 &
          "


